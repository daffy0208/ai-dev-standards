{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MCP Server Definition Schema",
  "description": "Schema for validating MCP (Model Context Protocol) server definitions",
  "type": "object",
  "required": ["id", "name", "description", "category", "path", "status", "capabilities"],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^[a-z0-9-]+-mcp$",
      "description": "Unique MCP server identifier (must end with -mcp)",
      "examples": ["vector-database-mcp", "accessibility-checker-mcp"]
    },
    "name": {
      "type": "string",
      "description": "Human-readable MCP server name",
      "examples": ["Vector Database MCP", "Accessibility Checker MCP"]
    },
    "description": {
      "type": "string",
      "minLength": 20,
      "maxLength": 500,
      "description": "Clear description of MCP server functionality"
    },
    "category": {
      "type": "string",
      "enum": [
        "ai",
        "development",
        "testing",
        "deployment",
        "database",
        "media",
        "optimization",
        "product",
        "design",
        "security",
        "quality",
        "orchestration",
        "analysis",
        "visualization",
        "documentation",
        "localization",
        "iot",
        "marketing"
      ],
      "description": "MCP server category"
    },
    "supports_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Skills that this MCP supports"
    },
    "features": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["tools", "resources", "prompts"]
      },
      "minItems": 1,
      "description": "MCP features provided"
    },
    "path": {
      "type": "string",
      "pattern": "^/MCP-SERVERS/[a-z0-9-]+-mcp$",
      "description": "Path to MCP server directory"
    },
    "status": {
      "type": "string",
      "enum": ["active", "deprecated", "experimental"],
      "description": "MCP server status"
    },
    "phase": {
      "type": "integer",
      "minimum": 1,
      "maximum": 5,
      "description": "Development phase (1-5)"
    },
    "tested": {
      "type": "boolean",
      "description": "Whether MCP has test coverage"
    },
    "capabilities": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "description": "List of specific capabilities"
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Required npm packages or external dependencies"
    },
    "configuration": {
      "type": "object",
      "description": "Required configuration options",
      "properties": {
        "env_vars": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "description"],
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "required": {
                "type": "boolean"
              },
              "default": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "examples": [
    {
      "id": "vector-database-mcp",
      "name": "Vector Database MCP",
      "description": "Manage vector databases for RAG and semantic search with support for multiple providers",
      "category": "ai",
      "supports_skills": ["rag-implementer"],
      "features": ["tools", "resources"],
      "path": "/MCP-SERVERS/vector-database-mcp",
      "status": "active",
      "phase": 2,
      "tested": true,
      "capabilities": [
        "Vector storage",
        "Similarity search",
        "Index management",
        "Metadata filtering"
      ],
      "dependencies": ["@pinecone-database/pinecone", "weaviate-ts-client"],
      "configuration": {
        "env_vars": [
          {
            "name": "VECTOR_DB_PROVIDER",
            "description": "Vector database provider (pinecone, weaviate, chroma)",
            "required": true
          },
          {
            "name": "PINECONE_API_KEY",
            "description": "Pinecone API key",
            "required": false
          }
        ]
      }
    }
  ]
}
